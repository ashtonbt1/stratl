# Generated by Django 2.2.24 on 2021-09-25 03:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('season', models.PositiveIntegerField()),
                ('team', models.CharField(max_length=5)),
                ('card_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.CharField(max_length=25, primary_key=True, serialize=False, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['last_name', 'first_name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Hitter',
            fields=[
                ('card_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='league.Card')),
                ('ab', models.PositiveIntegerField()),
                ('do', models.PositiveIntegerField()),
                ('tr', models.PositiveIntegerField()),
                ('hr', models.PositiveIntegerField()),
                ('bb', models.PositiveIntegerField()),
                ('so', models.PositiveIntegerField()),
                ('rbi', models.PositiveIntegerField()),
                ('bavg', models.DecimalField(decimal_places=3, max_digits=4)),
                ('obp', models.DecimalField(decimal_places=3, max_digits=4)),
                ('slg', models.DecimalField(decimal_places=3, max_digits=4)),
                ('sb', models.PositiveIntegerField()),
                ('cs', models.PositiveIntegerField()),
                ('bats', models.CharField(choices=[('R', 'R'), ('L', 'L'), ('S', 'S')], max_length=1)),
                ('power_lhp', models.CharField(choices=[('N', 'N'), ('W', 'W')], max_length=1)),
                ('power_rhp', models.CharField(choices=[('N', 'N'), ('W', 'W')], max_length=1)),
                ('steal_auto_lead', models.BooleanField()),
                ('steal_rating', models.CharField(choices=[('A', 'A'), ('AA', 'AA'), ('AAA', 'AAA'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=3)),
                ('steal_good_lead', models.CharField(blank=True, max_length=50)),
                ('steal_auto_cs', models.CharField(blank=True, max_length=50)),
                ('steal_primary', models.PositiveIntegerField()),
                ('steal_secondary', models.PositiveIntegerField()),
                ('bunt', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=1)),
                ('hnr', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=1)),
                ('running', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['last_name', 'first_name', 'season', 'team', 'card_type'],
            },
            bases=('league.card',),
        ),
        migrations.CreateModel(
            name='Pitcher',
            fields=[
                ('card_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='league.Card')),
                ('w', models.PositiveIntegerField()),
                ('l', models.PositiveIntegerField()),
                ('era', models.DecimalField(decimal_places=2, max_digits=5)),
                ('ip', models.PositiveIntegerField()),
                ('hits', models.PositiveIntegerField()),
                ('walks', models.PositiveIntegerField()),
                ('ks', models.PositiveIntegerField()),
                ('hr', models.PositiveIntegerField()),
                ('gs', models.PositiveIntegerField()),
                ('sv', models.PositiveIntegerField()),
                ('throws', models.CharField(choices=[('R', 'R'), ('L', 'L'), ('S', 'S')], max_length=1)),
                ('starter', models.PositiveIntegerField(null=True)),
                ('relief', models.PositiveIntegerField(null=True)),
                ('closer', models.CharField(blank=True, max_length=1)),
                ('starred', models.BooleanField(null=True)),
                ('starter_first', models.BooleanField()),
                ('bats', models.CharField(max_length=4)),
                ('hold', models.IntegerField()),
                ('fielding', models.PositiveIntegerField()),
                ('error', models.PositiveIntegerField()),
                ('bk', models.PositiveIntegerField()),
                ('wp', models.PositiveIntegerField()),
                ('bunt', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=1)),
                ('injury', models.PositiveIntegerField(null=True)),
                ('steal_auto_lead', models.BooleanField()),
                ('steal_rating', models.CharField(choices=[('A', 'A'), ('AA', 'AA'), ('AAA', 'AAA'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=3)),
                ('steal_good_lead', models.CharField(blank=True, max_length=50, null=True)),
                ('steal_auto_cs', models.CharField(blank=True, max_length=50, null=True)),
                ('steal_primary', models.PositiveIntegerField(null=True)),
                ('steal_secondary', models.PositiveIntegerField(null=True)),
                ('running', models.PositiveIntegerField(null=True)),
            ],
            options={
                'ordering': ['last_name', 'first_name', 'season', 'team', 'card_type'],
            },
            bases=('league.card',),
        ),
        migrations.CreateModel(
            name='RollResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column', models.PositiveIntegerField()),
                ('d6_roll', models.PositiveIntegerField()),
                ('modifier', models.CharField(blank=True, choices=[('N', 'Normal'), ('S', 'Split'), ('BS', 'Ballpark Single'), ('BO', 'Ballpark Open'), ('BH', 'Ballpark HR'), ('BHS', 'Ballpark HR Split'), ('INJ', 'Injury Chance'), ('C', 'Clutch'), ('F', 'Fatigue')], max_length=5, null=True)),
                ('desc', models.CharField(blank=True, choices=[('CATCH-X', 'CATCH-X'), ('DO', 'DO'), ('DOUBLE**', 'DOUBLE**'), ('DO**', 'DO**'), ('DOUBLE (cf)', 'DOUBLE (cf)'), ('DOUBLE (lf)', 'DOUBLE (lf)'), ('DOUBLE (rf)', 'DOUBLE (rf)'), ('FLY (cf) X', 'FLY (cf) X'), ('FLY (lf) X', 'FLY (lf) X'), ('FLY (rf) X', 'FLY (rf) X'), ('GB (1b) X', 'GB (1b) X'), ('GB (2b) X', 'GB (2b) X'), ('GB (3b) X', 'GB (3b) X'), ('GB (p) X', 'GB (p) X'), ('GB (ss) X', 'GB (ss) X'), ('HBP', 'HBP'), ('HOMERUN', 'HOMERUN'), ('HR', 'HR'), ('N-HR', 'N-HR'), ('SI*', 'SI*'), ('SI**', 'SI**'), ('SINGLE (cf)', 'SINGLE (cf)'), ('SINGLE (lf)', 'SINGLE (lf)'), ('SINGLE (rf)', 'SINGLE (rf)'), ('SINGLE*', 'SINGLE*'), ('SINGLE**', 'SINGLE**'), ('TR', 'TR'), ('TRIPLE', 'TRIPLE'), ('WALK', 'WALK'), ('fly (cf) A', 'fly (cf) A'), ('fly (cf) B', 'fly (cf) B'), ('fly (cf) B?', 'fly (cf) B?'), ('fly (cf) C', 'fly (cf) C'), ('fly (lf) B', 'fly (lf) B'), ('fly (lf) B?', 'fly (lf) B?'), ('fly (lf) C', 'fly (lf) C'), ('fly (rf) A', 'fly (rf) A'), ('fly (rf) B', 'fly (rf) B'), ('fly (rf) B?', 'fly (rf) B?'), ('fly (rf) C', 'fly (rf) C'), ('foulout (1b)', 'foulout (1b)'), ('foulout (3b)', 'foulout (3b)'), ('foulout (c)', 'foulout (c)'), ('gb (1b) A', 'gb (1b) A'), ('gb (1b) A+', 'gb (1b) A+'), ('gb (1b) B', 'gb (1b) B'), ('gb (1b) C', 'gb (1b) C'), ('gb (2b) A', 'gb (2b) A'), ('gb (2b) A+', 'gb (2b) A+'), ('gb (2b) B', 'gb (2b) B'), ('gb (2b) B+', 'gb (2b) B+'), ('gb (2b) C', 'gb (2b) C'), ('gb (3b) A', 'gb (3b) A'), ('gb (3b) B', 'gb (3b) B'), ('gb (p) A', 'gb (p) A'), ('gb (p) B', 'gb (p) B'), ('gb (ss) A', 'gb (ss) A'), ('gb (ss) A+', 'gb (ss) A+'), ('gb (ss) B', 'gb (ss) B'), ('gb (ss) B+', 'gb (ss) B+'), ('lineout (1b)', 'lineout (1b)'), ('lineout (2b)', 'lineout (2b)'), ('lineout (3b)', 'lineout (3b)'), ('lineout (ss)', 'lineout (ss)'), ('lo', 'lo'), ('lo (1b)', 'lo (1b)'), ('lo (1b) max', 'lo (1b) max'), ('lo (2b)', 'lo (2b)'), ('lo (2b) max', 'lo (2b) max'), ('lo (3b)', 'lo (3b)'), ('lo (3b) max', 'lo (3b) max'), ('lo (ss)', 'lo (ss)'), ('lo (ss) max', 'lo (ss) max'), ('popout (1b)', 'popout (1b)'), ('popout (2b)', 'popout (2b)'), ('popout (3b)', 'popout (3b)'), ('popout (ss)', 'popout (ss)'), ('strikeout', 'strikeout')], max_length=60, null=True)),
                ('split', models.PositiveIntegerField(blank=True, null=True)),
                ('low', models.CharField(blank=True, choices=[('CATCH-X', 'CATCH-X'), ('DO', 'DO'), ('DOUBLE**', 'DOUBLE**'), ('DO**', 'DO**'), ('DOUBLE (cf)', 'DOUBLE (cf)'), ('DOUBLE (lf)', 'DOUBLE (lf)'), ('DOUBLE (rf)', 'DOUBLE (rf)'), ('FLY (cf) X', 'FLY (cf) X'), ('FLY (lf) X', 'FLY (lf) X'), ('FLY (rf) X', 'FLY (rf) X'), ('GB (1b) X', 'GB (1b) X'), ('GB (2b) X', 'GB (2b) X'), ('GB (3b) X', 'GB (3b) X'), ('GB (p) X', 'GB (p) X'), ('GB (ss) X', 'GB (ss) X'), ('HBP', 'HBP'), ('HOMERUN', 'HOMERUN'), ('HR', 'HR'), ('N-HR', 'N-HR'), ('SI*', 'SI*'), ('SI**', 'SI**'), ('SINGLE (cf)', 'SINGLE (cf)'), ('SINGLE (lf)', 'SINGLE (lf)'), ('SINGLE (rf)', 'SINGLE (rf)'), ('SINGLE*', 'SINGLE*'), ('SINGLE**', 'SINGLE**'), ('TR', 'TR'), ('TRIPLE', 'TRIPLE'), ('WALK', 'WALK'), ('fly (cf) A', 'fly (cf) A'), ('fly (cf) B', 'fly (cf) B'), ('fly (cf) B?', 'fly (cf) B?'), ('fly (cf) C', 'fly (cf) C'), ('fly (lf) B', 'fly (lf) B'), ('fly (lf) B?', 'fly (lf) B?'), ('fly (lf) C', 'fly (lf) C'), ('fly (rf) A', 'fly (rf) A'), ('fly (rf) B', 'fly (rf) B'), ('fly (rf) B?', 'fly (rf) B?'), ('fly (rf) C', 'fly (rf) C'), ('foulout (1b)', 'foulout (1b)'), ('foulout (3b)', 'foulout (3b)'), ('foulout (c)', 'foulout (c)'), ('gb (1b) A', 'gb (1b) A'), ('gb (1b) A+', 'gb (1b) A+'), ('gb (1b) B', 'gb (1b) B'), ('gb (1b) C', 'gb (1b) C'), ('gb (2b) A', 'gb (2b) A'), ('gb (2b) A+', 'gb (2b) A+'), ('gb (2b) B', 'gb (2b) B'), ('gb (2b) B+', 'gb (2b) B+'), ('gb (2b) C', 'gb (2b) C'), ('gb (3b) A', 'gb (3b) A'), ('gb (3b) B', 'gb (3b) B'), ('gb (p) A', 'gb (p) A'), ('gb (p) B', 'gb (p) B'), ('gb (ss) A', 'gb (ss) A'), ('gb (ss) A+', 'gb (ss) A+'), ('gb (ss) B', 'gb (ss) B'), ('gb (ss) B+', 'gb (ss) B+'), ('lineout (1b)', 'lineout (1b)'), ('lineout (2b)', 'lineout (2b)'), ('lineout (3b)', 'lineout (3b)'), ('lineout (ss)', 'lineout (ss)'), ('lo', 'lo'), ('lo (1b)', 'lo (1b)'), ('lo (1b) max', 'lo (1b) max'), ('lo (2b)', 'lo (2b)'), ('lo (2b) max', 'lo (2b) max'), ('lo (3b)', 'lo (3b)'), ('lo (3b) max', 'lo (3b) max'), ('lo (ss)', 'lo (ss)'), ('lo (ss) max', 'lo (ss) max'), ('popout (1b)', 'popout (1b)'), ('popout (2b)', 'popout (2b)'), ('popout (3b)', 'popout (3b)'), ('popout (ss)', 'popout (ss)'), ('strikeout', 'strikeout')], max_length=60, null=True)),
                ('high', models.CharField(blank=True, choices=[('CATCH-X', 'CATCH-X'), ('DO', 'DO'), ('DOUBLE**', 'DOUBLE**'), ('DO**', 'DO**'), ('DOUBLE (cf)', 'DOUBLE (cf)'), ('DOUBLE (lf)', 'DOUBLE (lf)'), ('DOUBLE (rf)', 'DOUBLE (rf)'), ('FLY (cf) X', 'FLY (cf) X'), ('FLY (lf) X', 'FLY (lf) X'), ('FLY (rf) X', 'FLY (rf) X'), ('GB (1b) X', 'GB (1b) X'), ('GB (2b) X', 'GB (2b) X'), ('GB (3b) X', 'GB (3b) X'), ('GB (p) X', 'GB (p) X'), ('GB (ss) X', 'GB (ss) X'), ('HBP', 'HBP'), ('HOMERUN', 'HOMERUN'), ('HR', 'HR'), ('N-HR', 'N-HR'), ('SI*', 'SI*'), ('SI**', 'SI**'), ('SINGLE (cf)', 'SINGLE (cf)'), ('SINGLE (lf)', 'SINGLE (lf)'), ('SINGLE (rf)', 'SINGLE (rf)'), ('SINGLE*', 'SINGLE*'), ('SINGLE**', 'SINGLE**'), ('TR', 'TR'), ('TRIPLE', 'TRIPLE'), ('WALK', 'WALK'), ('fly (cf) A', 'fly (cf) A'), ('fly (cf) B', 'fly (cf) B'), ('fly (cf) B?', 'fly (cf) B?'), ('fly (cf) C', 'fly (cf) C'), ('fly (lf) B', 'fly (lf) B'), ('fly (lf) B?', 'fly (lf) B?'), ('fly (lf) C', 'fly (lf) C'), ('fly (rf) A', 'fly (rf) A'), ('fly (rf) B', 'fly (rf) B'), ('fly (rf) B?', 'fly (rf) B?'), ('fly (rf) C', 'fly (rf) C'), ('foulout (1b)', 'foulout (1b)'), ('foulout (3b)', 'foulout (3b)'), ('foulout (c)', 'foulout (c)'), ('gb (1b) A', 'gb (1b) A'), ('gb (1b) A+', 'gb (1b) A+'), ('gb (1b) B', 'gb (1b) B'), ('gb (1b) C', 'gb (1b) C'), ('gb (2b) A', 'gb (2b) A'), ('gb (2b) A+', 'gb (2b) A+'), ('gb (2b) B', 'gb (2b) B'), ('gb (2b) B+', 'gb (2b) B+'), ('gb (2b) C', 'gb (2b) C'), ('gb (3b) A', 'gb (3b) A'), ('gb (3b) B', 'gb (3b) B'), ('gb (p) A', 'gb (p) A'), ('gb (p) B', 'gb (p) B'), ('gb (ss) A', 'gb (ss) A'), ('gb (ss) A+', 'gb (ss) A+'), ('gb (ss) B', 'gb (ss) B'), ('gb (ss) B+', 'gb (ss) B+'), ('lineout (1b)', 'lineout (1b)'), ('lineout (2b)', 'lineout (2b)'), ('lineout (3b)', 'lineout (3b)'), ('lineout (ss)', 'lineout (ss)'), ('lo', 'lo'), ('lo (1b)', 'lo (1b)'), ('lo (1b) max', 'lo (1b) max'), ('lo (2b)', 'lo (2b)'), ('lo (2b) max', 'lo (2b) max'), ('lo (3b)', 'lo (3b)'), ('lo (3b) max', 'lo (3b) max'), ('lo (ss)', 'lo (ss)'), ('lo (ss) max', 'lo (ss) max'), ('popout (1b)', 'popout (1b)'), ('popout (2b)', 'popout (2b)'), ('popout (3b)', 'popout (3b)'), ('popout (ss)', 'popout (ss)'), ('strikeout', 'strikeout')], max_length=60, null=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.Card')),
            ],
        ),
        migrations.AddField(
            model_name='card',
            name='parent_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.Player'),
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pos', models.CharField(choices=[('C', 'C'), ('1B', '1B'), ('2B', '2B'), ('3B', '3B'), ('SS', 'SS'), ('LF', 'LF'), ('CF', 'CF'), ('RF', 'RF')], max_length=2)),
                ('fielding', models.PositiveIntegerField()),
                ('error', models.PositiveIntegerField()),
                ('arm', models.IntegerField(blank=True, null=True)),
                ('pb', models.IntegerField(blank=True, null=True)),
                ('t_err', models.IntegerField(blank=True, null=True)),
                ('hitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='league.Hitter')),
            ],
        ),
    ]
